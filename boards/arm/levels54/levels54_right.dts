/*
 * Copyright (c) 2025 Vincent Franco
 * SPDX-License-Identifier: MIT
 */

#include "levels54.dts"
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors/report_rate_limit.dtsi>
#include <behaviors/rate_limit.dtsi>

/ {
  chosen {
    model = "levels54_right";
    compatible = "levels54_right";
  };

  aliases {
    led-red = &led0;
    led-green = &led1;
    led-blue = &led2;
  };

  leds {
    compatible = "gpio-leds";
    status = "okay";
    led0: led_0 {
      gpios = <&gpio0 13 GPIO_ACTIVE_LOW>;
    };
    led1: led_1 {
      gpios = <&gpio0 22 GPIO_ACTIVE_LOW>;
    };
    led2: led_2 {
      gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
    };
  };
};

// Offset right side
&matrix_transform0 {
  col-offset = <6>;
};

&kscan0 {
  compatible = "zmk,kscan-gpio-matrix";

  row-gpios
    = <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&gpio0 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&gpio1 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&gpio1 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&gpio1 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    ;

  col-gpios
    = <&gpio0 29 GPIO_ACTIVE_HIGH>
    , <&gpio1 4 GPIO_ACTIVE_HIGH>
    , <&gpio1 11 GPIO_ACTIVE_HIGH>
    , <&gpio0 28 GPIO_ACTIVE_HIGH>
    , <&gpio0 3 GPIO_ACTIVE_HIGH>
    , <&gpio1 10 GPIO_ACTIVE_HIGH>
    ;
};

&trackball_peripheral_listener {
    status = "okay";
};

&spi0 {
    cs-gpios = <&gpio0 8 GPIO_ACTIVE_LOW>;

    trackball_central: trackball_central@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 12 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <1100>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        x-invert;
        y-invert;
        xy-swap;
        force-awake;
        /* keep the sensor awake while ZMK activity state is ACTIVE,
           fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
           thus, the sensor would be a `wakeup-source` */
        force-high-performance;
    };
};

// Overrides for the input listener node
&trackball_central_listener {
    status = "okay";
    device = <&trackball_central>;
    input-processors = <&zip_ble_report_rate_limit>;
};